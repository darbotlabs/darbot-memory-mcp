name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and test
  test:
    runs-on: ubuntu-latest
    name: Test and Lint
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup PowerShell
      shell: pwsh
      run: |
        $PSVersionTable.PSVersion
    
    - name: Install .NET tools
      run: |
        dotnet tool install --global nbgv
        dotnet tool install --global dotnet-format
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --configuration Release --no-restore
    
    - name: Run unit tests
      run: dotnet test --configuration Release --no-build --verbosity normal --logger trx --collect:"XPlat Code Coverage"
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          **/*.trx
          **/coverage.cobertura.xml
    
    - name: Check code format
      run: dotnet format --verify-no-changes --verbosity diagnostic
    
    - name: Get version
      id: version
      run: |
        VERSION=$(nbgv get-version --format json | jq -r '.CloudBuildNumber')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

  # Security scan
  security:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and push container image
  build:
    runs-on: ubuntu-latest
    needs: [test]
    name: Build Container
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Install nbgv
      run: dotnet tool install --global nbgv
    
    - name: Get version
      id: version
      run: |
        VERSION=$(nbgv get-version --format json | jq -r '.CloudBuildNumber')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=${{ steps.version.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push container image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  # Deploy to test environment
  deploy-test:
    runs-on: ubuntu-latest
    needs: [build, security]
    name: Deploy to Test
    if: github.ref == 'refs/heads/develop'
    environment: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to test environment
      run: |
        echo "Deploying to test environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}"
        # Add actual deployment commands here

  # Deploy to production
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [build, security]
    name: Deploy to Production
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}"
        # Add actual deployment commands here